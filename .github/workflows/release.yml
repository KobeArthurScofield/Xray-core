name: Build and Release

on:
  workflow_dispatch:
  release:
    types: [published]
jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Restore Cache
        uses: actions/cache/restore@v3
        with:
          path: resources

      - name: Save Cache
        uses: actions/cache/save@v3
        if: ${{ steps.update.outputs.unhit }}
        with:
          path: resources

  build:
    needs: prepare
    permissions:
      contents: write
    strategy:
      matrix:
        # Include amd64 on all platforms.
        goos: [windows, freebsd, openbsd, linux, darwin]
        goarch: [amd64]
        goamd64: [v2, v3]
      fail-fast: false

    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOAMD64: ${{ matrix.goamd64 }}
      CGO_ENABLED: 0
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Show workflow information 
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOAMD64\"].friendlyName" -r < .github/build/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOAMD64:$GOAMD64, RELEASE_NAME: $_NAME"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          check-latest: true

      - name: Get project dependencies
        run: go mod download
      
      - name: Replace Custom to Commit ID
        if: github.event_name != 'release'
        run: |
          ID=$(git rev-parse --short ${{ github.sha }})
          if [ "${{ github.event_name }}" == 'pull_request' ]
          then
            ID=$(git rev-parse --short ${{ github.event.pull_request.head.sha }})
          fi
          sed -i '/build/ s/Custom/'$ID'/' ./core/core.go
 
      - name: Build Xray
        run: |
          mkdir -p build_assets
          go build -v -o build_assets/xray -trimpath -ldflags "-s -w -buildid=" ./main

      - name: Build background Xray on Windows 
        if: matrix.goos == 'windows'
        run: |
          go build -v -o build_assets/wxray.exe -trimpath -ldflags "-s -w -H windowsgui -buildid=" ./main
  
      - name: Rename Windows Xray
        if: matrix.goos == 'windows'
        run: |
          cd ./build_assets || exit 1
          mv xray xray.exe

      - name: Restore Cache
        uses: actions/cache/restore@v3
        with:
          path: resources

      - name: Copy README.md & LICENSE
        run: |
          mv -f resources/* build_assets
          cp ${GITHUB_WORKSPACE}/README.md ./build_assets/README.md
          cp ${GITHUB_WORKSPACE}/LICENSE ./build_assets/LICENSE

      - name: Create ZIP archive
        shell: bash
        run: |
          pushd build_assets || exit 1
          touch -mt $(date +%Y01010000) *
          zip -9vr ../Xray-${{ env.ASSET_NAME }}.zip .
          popd || exit 1
          FILE=./Xray-${{ env.ASSET_NAME }}.zip
          DGST=$FILE.dgst
          for METHOD in {"md5","sha1","sha256","sha512"}
          do
            openssl dgst -$METHOD $FILE | sed 's/([^)]*)//g' >>$DGST
          done

      - name: Change the name
        run: |
          mv build_assets Xray-${{ env.ASSET_NAME }}

      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Xray-${{ env.ASSET_NAME }}
          path: |
            ./Xray-${{ env.ASSET_NAME }}/*

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./Xray-${{ env.ASSET_NAME }}.zip*
          tag: ${{ github.ref }}
          file_glob: true
